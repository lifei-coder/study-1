### 解题思路

- `if(temp_l1!=null&&temp_l1.next!=null) temp_l1=temp_l1.next;`对于这条语句必须要保证当前结点不是空，才可以访问下一个节点，否则会造成空指针异常，而`temp_l1!=null`可以很好的过滤作用
- 这道题主要是维持一个进位变量`next_num`

### 代码

* java

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode ans=new ListNode(0);
        ListNode temp_ans=ans;
        ListNode temp_l1=l1,temp_l2=l2;
        int next_num=0;
        
        while (!(temp_l1==null&&temp_l2==null)){
            int num_l1=temp_l1==null ? 0:temp_l1.val;
            int num_l2=temp_l2==null ? 0:temp_l2.val;
            temp_ans.next=new ListNode((num_l1+num_l2+next_num)%10);
            temp_ans=temp_ans.next;
            next_num=(num_l1+num_l2+next_num)/10;
            //必须要对该节点进行“非空值”过滤
            if(temp_l1!=null&&temp_l1.next!=null) temp_l1=temp_l1.next;
            else temp_l1=null;
            if(temp_l2!=null&&temp_l2.next!=null) temp_l2=temp_l2.next;
            else temp_l2=null;
        }
        if(next_num==1) temp_ans.next=new ListNode(next_num);
        return ans.next;
    }
}
```

